<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>~/yui/.thoughts.md</title>
  
  <subtitle>A random fucker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuicheng.github.io/"/>
  <updated>2018-10-10T08:59:55.827Z</updated>
  <id>https://yuicheng.github.io/</id>
  
  <author>
    <name>Yui Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arch Linux on WSL</title>
    <link href="https://yuicheng.github.io/2018/10/10/Arch-Linux-on-WSL/"/>
    <id>https://yuicheng.github.io/2018/10/10/Arch-Linux-on-WSL/</id>
    <published>2018-10-10T08:55:25.000Z</published>
    <updated>2018-10-10T08:59:55.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arch-Linux-on-WSL"><a href="#Arch-Linux-on-WSL" class="headerlink" title="Arch Linux on WSL"></a>Arch Linux on WSL</h1><pre><code>要经常在 Linux 和 -辣鸡- Windows 之间来回折腾真的是很难受，而且有时候还只是要在 Shell 上跑点脚本或者命令。 </code></pre><p>所幸有 WSL 这个好东西，但是 Micro soft Store 能下载的只有 Ubuntu。 学习了一下可以用一些特殊的技巧变成 Arch ，再在<br>AUR 上下东西就方便得多的了。 1. 先在 Store 里下载 Ubuntu，并且在 Powershell 下把默认用户改成 root <code>ubuntu —-config user root</code> 2. 从 USTC 或者清华的镜像站下载 archlinux-bootstrap， 为了方便建议放在任意盘符的根目录下。</p><pre><code>1. Ubuntu 下 `cd /mnt/c` 并 `tar -zxvf`（不要在 Windows 下解压，否则会导致权限问题）2. 在 Windows Explorer 中将 Ubuntu 目录下的 LocalState/rootfs/中的以下文件删除。并且用 archlinux-bootstrap </code></pre><p>中的同名文件和目录替换。</p><pre><code>* bin* etc* lib* lib64* sbin* usr* var </code></pre><ol start="3"><li>从运行 Arch 的电脑或者软件源下载 fakeroot-tcp 并且放在文件系统中一个方便的目录下 （如果你想使用<br>AUR ，这一步是必要的） </li><li>再次进入 Ubuntu 并运行 <pre><code>pacman-key —init pacman-key —populate archlinux pacman -U path-to-fakeroot-tcp pacman -Syyu base base-devel </code></pre></li><li>新建一个用户并且添加到 sudoers</li><li>开始欢乐 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Arch-Linux-on-WSL&quot;&gt;&lt;a href=&quot;#Arch-Linux-on-WSL&quot; class=&quot;headerlink&quot; title=&quot;Arch Linux on WSL&quot;&gt;&lt;/a&gt;Arch Linux on WSL&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;要经
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gdb-peda &amp; pwndbg commonly used commands</title>
    <link href="https://yuicheng.github.io/2018/10/04/gdb-peda%20&amp;%20pwndbg%20commonly%20used%20commands/"/>
    <id>https://yuicheng.github.io/2018/10/04/gdb-peda &amp; pwndbg commonly used commands/</id>
    <published>2018-10-04T19:59:24.000Z</published>
    <updated>2018-10-10T08:32:19.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Breakpoints"><a href="#Breakpoints" class="headerlink" title="Breakpoints"></a>Breakpoints</h2><p><code>b / break *addr</code> or <code>b func</code> bp at addr or bp at func</p><p><code>tb</code> one-time-only breakpoint</p><p><code>info b</code> view all breakpoints</p><p><code>watch *addr</code> stop when mem at addr changed.</p><hr><h2 id="Control-amp-debugging"><a href="#Control-amp-debugging" class="headerlink" title="Control &amp; debugging"></a>Control &amp; debugging</h2><p><code>c</code> continue</p><p><code>r</code> run</p><p><code>ni</code> step over</p><p><code>si</code> step in</p><p><code>fini</code> run till func ret</p><p><code>return expr</code> assign return value of expr</p><hr><p><code>s / stack</code> show stack and registers and disasm</p><p><code>bt</code> current stack frame</p><p>​    <code>Example</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span>0  0xf7e250d0 in gets () from /usr/lib32/libc.so.6</span><br><span class="line"><span class="hljs-meta">#</span>1  0x080486b3 in main () at ret2text.c:24</span><br><span class="line"><span class="hljs-meta">#</span>2  0xf7dd6b41 in __libc_start_main () from /usr/lib32/libc.so.6</span><br><span class="line"><span class="hljs-meta">#</span>3  0x08048521 in _start ()</span><br></pre></td></tr></table></figure><hr><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><code>bins</code> show bins</p><p><code>vmmap</code> show virtual memory map</p><p><code>shellcode</code> generate shellcode</p><p><code>context</code> show context contents</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Breakpoints&quot;&gt;&lt;a href=&quot;#Breakpoints&quot; class=&quot;headerlink&quot; title=&quot;Breakpoints&quot;&gt;&lt;/a&gt;Breakpoints&lt;/h2&gt;&lt;p&gt;&lt;code&gt;b / break *addr&lt;/code&gt; or &lt;c
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://yuicheng.github.io/tags/pwn/"/>
    
      <category term="gdb" scheme="https://yuicheng.github.io/tags/gdb/"/>
    
      <category term="linux" scheme="https://yuicheng.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
